"""
ConsumerPageTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen
from requests import RequestException
from typing import List

from .common_message_exception import CommonMessageException
from .consumer_page import ConsumerPage
from .consumer_page_collection import ConsumerPageCollection

class ConsumerPageTag(sdkgen.TagAbstract):
    @classmethod
    def __init__(cls, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)


    @classmethod
    def get(cls, page_id: str) -> ConsumerPage:
        try:
            path_params = {}
            path_params["page_id"] = page_id

            query_params = {}

            query_struct_names = []

            url = cls.parser.url("/consumer/page/:page_id", path_params)

            headers = {}

            response = cls.http_client.get(url, headers=headers, params=cls.parser.query(query_params, query_struct_names))

            if response.status_code >= 200 and response.status_code < 300:
                return ConsumerPage.model_validate_json(json_data=response.content)

            if response.status_code == 401:
                raise CommonMessageException(response.content)
            if response.status_code == 404:
                raise CommonMessageException(response.content)
            if response.status_code == 410:
                raise CommonMessageException(response.content)
            if response.status_code == 500:
                raise CommonMessageException(response.content)

            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except RequestException as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))

    @classmethod
    def get_all(cls, start_index: int, count: int, search: str) -> ConsumerPageCollection:
        try:
            path_params = {}

            query_params = {}
            query_params["startIndex"] = start_index
            query_params["count"] = count
            query_params["search"] = search

            query_struct_names = []

            url = cls.parser.url("/consumer/page", path_params)

            headers = {}

            response = cls.http_client.get(url, headers=headers, params=cls.parser.query(query_params, query_struct_names))

            if response.status_code >= 200 and response.status_code < 300:
                return ConsumerPageCollection.model_validate_json(json_data=response.content)

            if response.status_code == 401:
                raise CommonMessageException(response.content)
            if response.status_code == 500:
                raise CommonMessageException(response.content)

            raise sdkgen.UnknownStatusCodeException("The server returned an unknown status code")
        except RequestException as e:
            raise sdkgen.ClientException("An unknown error occurred: " + str(e))


