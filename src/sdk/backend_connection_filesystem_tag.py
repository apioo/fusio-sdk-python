"""
BackendConnectionFilesystemTag automatically generated by SDKgen please do not edit this file manually
https://sdkgen.app
"""

import requests
import sdkgen
from requests import RequestException
from typing import List
from typing import Dict
from typing import Any
from urllib.parse import parse_qs

from .backend_file_collection import BackendFileCollection
from .common_message import CommonMessage
from .common_message_exception import CommonMessageException

class BackendConnectionFilesystemTag(sdkgen.TagAbstract):
    def __init__(self, http_client: requests.Session, parser: sdkgen.Parser):
        super().__init__(http_client, parser)


    def create(self, connection_id: str, payload: Dict[str, Any]) -> CommonMessage:
        """
        Uploads one or more files on the filesystem connection
        """
        try:
            path_params = {}
            path_params['connection_id'] = connection_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/backend/connection/:connection_id/filesystem', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)

            options['files'] = payload


            response = self.http_client.request('POST', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = CommonMessage.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode >= 0 and statusCode <= 999:
                data = CommonMessage.model_validate_json(json_data=response.content)

                raise CommonMessageException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def delete(self, connection_id: str, file_id: str) -> CommonMessage:
        """
        Deletes an existing file on the filesystem connection
        """
        try:
            path_params = {}
            path_params['connection_id'] = connection_id
            path_params['file_id'] = file_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/backend/connection/:connection_id/filesystem/:file_id', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('DELETE', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = CommonMessage.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode >= 0 and statusCode <= 999:
                data = CommonMessage.model_validate_json(json_data=response.content)

                raise CommonMessageException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def get(self, connection_id: str, file_id: str) -> bytearray:
        """
        Returns the content of the provided file id on the filesystem connection
        """
        try:
            path_params = {}
            path_params['connection_id'] = connection_id
            path_params['file_id'] = file_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/backend/connection/:connection_id/filesystem/:file_id', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)


            options['headers']['Accept'] = 'application/octet-stream'

            response = self.http_client.request('GET', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = response.content

                return data

            statusCode = response.status_code
            if statusCode >= 0 and statusCode <= 999:
                data = CommonMessage.model_validate_json(json_data=response.content)

                raise CommonMessageException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def get_all(self, connection_id: str, start_index: int, count: int) -> BackendFileCollection:
        """
        Returns all available files on the filesystem connection
        """
        try:
            path_params = {}
            path_params['connection_id'] = connection_id

            query_params = {}
            query_params['startIndex'] = start_index
            query_params['count'] = count

            query_struct_names = []

            url = self.parser.url('/backend/connection/:connection_id/filesystem', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)



            response = self.http_client.request('GET', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = BackendFileCollection.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode >= 0 and statusCode <= 999:
                data = CommonMessage.model_validate_json(json_data=response.content)

                raise CommonMessageException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))

    def update(self, connection_id: str, file_id: str, payload: Dict[str, Any]) -> CommonMessage:
        """
        Updates an existing file on the filesystem connection
        """
        try:
            path_params = {}
            path_params['connection_id'] = connection_id
            path_params['file_id'] = file_id

            query_params = {}

            query_struct_names = []

            url = self.parser.url('/backend/connection/:connection_id/filesystem/:file_id', path_params)

            options = {}
            options['headers'] = {}
            options['params'] = self.parser.query(query_params, query_struct_names)

            options['files'] = payload


            response = self.http_client.request('PUT', url, **options)

            if response.status_code >= 200 and response.status_code < 300:
                data = CommonMessage.model_validate_json(json_data=response.content)

                return data

            statusCode = response.status_code
            if statusCode >= 0 and statusCode <= 999:
                data = CommonMessage.model_validate_json(json_data=response.content)

                raise CommonMessageException(data)

            raise sdkgen.UnknownStatusCodeException('The server returned an unknown status code: ' + str(statusCode))
        except RequestException as e:
            raise sdkgen.ClientException('An unknown error occurred: ' + str(e))



